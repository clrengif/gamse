#!/usr/bin/env python3
import os
import sys
import logging
import getpass
import platform
import subprocess


def print_help():
    pass

def record_system_info():
    # get system information, and write them into the log file
    system, node, release, version, machine, processor = platform.uname()

    if system in ['Linux']:
        # find how many physical processers
        p = subprocess.Popen('grep "physical id" /proc/cpuinfo|sort|uniq|wc -l',
                             shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
        processor_number = int(p.stdout.readlines()[0])

        # find the model name of the processors
        p = subprocess.Popen('grep "model name" /proc/cpuinfo|uniq', shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
        processor = '; '.join([row.decode('utf-8').split(':')[1].strip()
                               for row in p.stdout.readlines()])

        # find how many cores
        p = subprocess.Popen('grep "cpu cores" /proc/cpuinfo|uniq',shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
        cores = int(p.stdout.readlines()[0].decode('utf-8').split(':')[1])

        # get the memory
        p = subprocess.Popen('free -mh',shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
        row = p.stdout.readlines()[1]
        info = row.split()
        memory = '%s (total); %s (used); %s (free)'%(info[1],info[2],info[3])
    else:
        processor_number = 0
        processor        = processor
        cores            = 0
        memory           = 'Unknown'


    distribution = ' '.join(platform.dist())
    username = getpass.getuser()
    node = platform.node()
    abspath = os.path.abspath(os.curdir)
    python_version = platform.python_version()

    info = ['Start reduction.',
            'Node:              %s'%node,
            'Processor:         %d x %s (%d cores)'%(processor_number, processor, cores),
            'System:            %s %s %s'%(system, release, machine),
            'Distribution:      %s'%distribution,
            'Memory:            %s'%memory,
            'Username:          %s'%username,
            'Python version:    %s'%python_version,
            'Working directory: %s'%abspath,
            ]
    separator = os.linesep + '  '
    logger.info(separator.join(info))

def main():

    if len(sys.argv)==1:
        print_help()
        exit()

    from edrs import pipelines
    from edrs.pipelines import find_rawdata, get_instrument

    if sys.argv[1] == 'reduce':
        # reduce the spectra

        record_system_info()

        # find path to the raw data
        rawpath = find_rawdata()
        if rawpath is None:
            print('Rawdata not found')
            exit()
        # find the instrument name
        instrument = get_instrument(rawpath)
        if instrument == '':
            instrument = sys.argv[2]

        # reduce the spectra
        from edrs.pipelines import reduce_echelle
        logger.info('Start reducing %s data'%instrument)
        reduce_echelle(instrument=instrument)

    elif sys.argv[1] == 'plot' and len(sys.argv)>=3:
        from edrs.echelle import plot
        plot.plot(sys.argv[2])
    elif sys.argv[1] == 'list':
        # list the observing log of raw data

        # find path to the raw data
        rawpath = find_rawdata()
        if rawpath is None:
            print('Rawdata not found')
            exit()
        # find the instrument name
        instrument = get_instrument(rawpath)
        if instrument == '':
            instrument = sys.argv[2]
        # print the log
        from edrs.pipelines import make_log
        make_log(instrument, rawpath)
    else:
        print('Unknow argument: %s'%sys.argv[1])
        exit()

if __name__=='__main__':
    log_fmt = ' '.join(['*',
                        '%(asctime)s.%(msecs)03d',
                        '[%(levelname)s]',
                        '%(name)s - %(lineno)d - %(funcName)s():'+os.linesep,
                        ' %(message)s'+os.linesep+'-'*80,
                        ])
    logging.basicConfig(filename='edrs.log',level=logging.INFO,
            format=log_fmt, datefmt='%Y-%m-%dT%H:%M:%S')
    logger = logging.getLogger(__name__)
    main()
